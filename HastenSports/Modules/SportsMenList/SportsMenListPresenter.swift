//
//  SportsMenListPresenter.swift
//  HastenSports
//
//  Created by Pablo V√©lez  on 03/12/2018.
//  Copyright (c) 2018 Denis. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import Alamofire

final class SportsMenListPresenter {

    // MARK: - Private properties -

    private unowned var _view: SportsMenListViewInterface
    private var _interactor: SportsMenListInteractorInterface
    private var _wireframe: SportsMenListWireframeInterface
    private var _playerSections: [Section<PlayerListElement>] = []
    
    // MARK: - Lifecycle -

    init(wireframe: SportsMenListWireframeInterface, view: SportsMenListViewInterface, interactor: SportsMenListInteractorInterface) {
        _wireframe = wireframe
        _view = view
        _interactor = interactor
    }
}

// MARK: - Extensions -

extension SportsMenListPresenter: SportsMenListPresenterInterface {
    
    func startFechData() {
        _interactor.getSportsMenList(){ [weak self] (response) -> (Void) in
            self?._handleSportsMenListResult(response.result)
            self?._view.reloadData()
        }
    }
    
    func numberOfSections() -> Int {
        return _playerSections.count
    }
    
    func section(at section: Int) -> Section<PlayerListElement> {
        return _playerSections[section]
    }
    
    func numberOfItems() -> Int {
        for section in _playerSections {
            return section.items.count
        }
        return 0
    }
    
    func item(at indexPath: IndexPath) -> Player {
        
        if (indexPath.row > _playerSections[indexPath.section].items.count - 1){
            return Player(image: "T##String?", surname: "T##String?", name: "T##String?", date: "T##String?")
        }
        
        return _playerSections[indexPath.section].items[indexPath.row]
    }
    
    func didSelectItem(at indexPath: IndexPath) {
        
    }
    
    func viewDidLoad() {
        startFechData()
    }
    
    // MARK: Utility
    
    func _handleSportsMenListResult(_ result: Result<PlayerList>) {
        switch result {
        case .success (let sections):
            for playersList in sections {
                _playerSections.append(Section.init(items: playersList.players!, header: playersList.title))
            }
        case .failure(let error):
            _wireframe.showErrorAlert(with: error.message)
        }
    }
}
